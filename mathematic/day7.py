# ====================
# コサイン類似度
# コサイン類似度はベクトル同士の向きの近さを表す。
# 二つの二次元ベクトルの内積は、各要素の積の総和として以外に、三角関数とL2ノルムを使って求めることもできる。
# $$\vec{a}･\vec{b} = ||\vec{a}||_2||\vec{b}||_2cos\theta = \sqrt{a_2^1 + a_2^2}\sqrt{b_2^1 + b_2^2}cos\theta$$
# [note]余弦定理
# この関係により、cosθの値を以下のように求めることができる。
# $$cos\theta = \frac{a_1 b_1 + a_2 b_2 }{ \sqrt{a_2^1+a_2^2} \sqrt{b_2^2 + b_2^2}}$$
# cosθの値は、ベクトル間の角度θが 0 の時最大値を取り、θが大きくなるほど小さくなる。
# したがってcosθの値は「2つのベクトルの向きがどれだけどれだけ揃っているか」を表す。
# 二次元ベクトルだけでなく、n次元のベクトルにも拡張できる。
# 人工知能で自然言語を扱う場合に、単語をしばしばベクトルで表す。
# コサイン類似度は、このような単語間の関係性を表すのに利用される。

# 内積とノルムを使って、コサイン類似度を計算する。
# 内積の計算にはNumPyのdot()関数、ノルムの計算にはlinalg.norm()関数を使う。

import numpy as np

def cos_sim(vec_1, vec_2):
    return np.dot(vec_1, vec_2) / (np.linalg.norm(vec_1) * np.linalg.norm(vec_2))

a = np.array([2, 2, 2, 2])
b = np.array([1, 1, 1, 1]) # aと同じ向き
c = np.array([-1, -1, -1, -1]) # aと正反対の向き

print("ｰｰｰ aとbのコサイン類似度 ---")
print(cos_sim(a, b))

print("ｰｰｰ aとcのコサイン類似度 ---")
print(cos_sim(a, c))