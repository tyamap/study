# ====================
# 行列の積
# 二つの行列の行列積
# 前の行列のすべての行と後の行列のすべての列の組み合わせで演算を行い、新しい行列を作る
# 前の行列の列数と後ろの行列の行数が一致していなければならない
# NumPyのdot()関数を用いて計算できる。

import numpy as np

a = np.array([[0, 1, 2],
              [1, 2, 3]])
b = np.array([[2, 1],
              [2, 1],
              [2, 1]])

print(np.dot(a, b))

# 要素ごとの積（アダマール積）
# 演算子*で演算できる

a = np.array([[0, 1, 2],
              [3, 4, 5],
              [6, 7, 8]])

b = np.array([[0, 1, 2],
              [2, 0, 1],
              [1, 2, 0]])

print(a * b)


# ====================
# 転置
#  行列を転置することにより、行と列が入れ替わる。
a = np.array([[1, 2, 3],
              [4, 5, 6]])
print(a)   # そのまま
print(a.T) # 転置

# 転置により前の行列の行数と後ろの行列の列数が一致し、行列積を演算できる場合がある
print(np.dot(a,a.T))

# ====================
# 単位行列
# 行と列の数が等しく、左上から右下にかけて 1 が並び、そのほかの要素が 0 である行列を単位行列という。
# 任意の行列に単位行列をかけても、行列の値は変化しない。
# NumPyで eye() 関数で単位行列を作成できる。

print(np.eye(2)) # 2×2の単位行列
print(np.eye(3))
print(np.eye(4))


# ====================
# 逆行列
# ある行列にかけると単位行列になる行列を逆行列という。
# ある行列は行と列の数が等しい正方行列である必要がある。

# 行列式
# 行列によっては逆行列が存在しない場合もある、
# 逆行列が存在するかどうかは、行列式によって判定できる。
# NumPyの linalg.det() 関数により、行列式を求めることができる。

a = np.array([[1, 2],
              [3, 4]])
print(np.linalg.det(a)) # 行列式が 0 にならない場合、逆行列が存在する。

b = np.array([[1, 2],
              [0, 0]])
print(np.linalg.det(b)) # 逆行列が 0 になる場合、逆行列は存在する。

# 逆行列の実装
# 逆行列が存在する場合、linalg.inv() 関数により逆行列を求めることができる。
invA = np.linalg.inv(a)
print(invA)
print(np.dot(a,invA)) # !!?? 単位行列にならない？

# 逆行列は、人工知能において変数同士の相関関係を調べる回帰分析に使われる。